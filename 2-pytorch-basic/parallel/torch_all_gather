import torch
import torch.nn as nn
from torch.autograd import Variable
from torch.utils.data import Dataset, DataLoader
import os
from torch.utils.data.distributed import DistributedSampler
# 1) 初始化
os.environ["CUDA_VISIBLE_DEVICES"] = "0,1,2,4"
torch.distributed.init_process_group(backend="nccl")

input_size = 5
output_size = 2
batch_size = 1
data_size = 90

# 2） 配置每个进程的gpu
local_rank = torch.distributed.get_rank()
print(local_rank)
torch.cuda.set_device(local_rank)
device = torch.device("cuda", local_rank)

class RandomDataset(Dataset):
    def __init__(self, size, length):
        self.len = length
        self.data = torch.randn(length, size).to('cuda')

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return self.len

dataset = RandomDataset(input_size, data_size)
# 3）使用DistributedSampler
rand_loader = DataLoader(dataset=dataset,
                         batch_size=batch_size,
                         sampler=DistributedSampler(dataset))
# print(len(dataset))
# print(len(rand_loader))
total = torch.tensor(0).to(device)

class Model(nn.Module):
    def __init__(self, input_size, output_size):
        super(Model, self).__init__()
        self.fc = nn.Linear(input_size, output_size)

    def forward(self, input):
        output = self.fc(input)
        # print("  In Model: input size", input.size(),
        #       "output size", output.size())
        return output

model = Model(input_size, output_size)

# 4) 封装之前要把模型移到对应的gpu
model.to(device)

if torch.cuda.device_count() > 1:
    # print("Let's use", torch.cuda.device_count(), "GPUs!")
    # 5) 封装
    model = torch.nn.parallel.DistributedDataParallel(model,
                                                      device_ids=[local_rank],
                                                      output_device=local_rank)

for data in rand_loader:
    total += len(data)
    if torch.cuda.is_available():
        input_var = data
    else:
        input_var = data

    output = model(input_var)
    # print("Outside: input size", input_var.size(), "output_size", output.size())
    # print(sum)
    # print(type(sum))
# print(type(sum))
# print(torch.distributed.get_rank())
# if torch.distributed.get_rank() ==0:
#     sums = torch.distributed.all_gather([torch.zeros_like(total) for _ in range(4)], total)
#     print(sums)
#     r = 0
#     for s in sums:
#         r += s.item()
#     print(r)
import torch.distributed as dist
rank = torch.distributed.get_rank()
print("gpus:",torch.cuda.device_count())
tensor_list = [torch.zeros(2, dtype=torch.int64).to(device) for _ in range(4)]

tensor = torch.arange(2, dtype=torch.int64) + 1 + 2 * rank
print(tensor)
sum = torch.tensor(11).to(device)
sum += 3
tensor = tensor.to(device)
sum_list = [torch.zeros_like(sum).to(device) for _ in range(4)]
dist.all_gather(tensor_list, tensor)
dist.all_gather(sum_list, sum)
print("sumlist:",sum_list)
print("tensor_list:",tensor_list)
if rank ==0:
    with open("./result.txt","w") as f:
        f.write(f"{rank}")
        a = 0
        for s in sum_list:
            a += s.item()
        f.write(str(a))
